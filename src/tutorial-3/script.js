const list = document.querySelector('.list_items');
const input = document.querySelector('.input');
const btn = document.querySelector('.btn');
let tasks = [];
render();

function render() {
  console.log('render');
  list.innerHTML = '';
  let out = '';
  tasks.map((t, i) => {
    return (out += `<li key=${t.id}> ${t.title} <button onclick="handleClickRemove(${i})">X</button></li>`);
  });
  list.innerHTML = out;
}

const handleClickAdd = (e) => {
  e.preventDefault();
  if (input.value) {
    tasks.push({
      id: tasks.length,
      title: input.value.toString().trim(),
    });
  }
  input.value = '';
  render();
};

function handleClickRemove(index) {
  debugger;
  console.log('delete' + index);
  // delete tasks[index]; // Тогда у нас empty
  tasks = tasks.filter((t) => t.id != index);

  render();
}

btn.addEventListener('click', handleClickAdd);
// Необходимо в массиве хранить список всех задач, которые буду создаваться/удаляться.
//
//   let tasks = ['Я хочу сделать список задач'];
// Надо сделать функцию render(), которая при каждом вызове будет пробегаться по массиву tasks и рендерить список задач внутри <ul>.
//
// Очень важно. Если вы будете делать такую функцию, то при каждом её вызове, сначала надо очищать <ul> и только потом уже туда добавлять что-то. Иначе задачи будут дублироваться.
//
//   Эту функцию нужно вызывать при:
//
//   Добавлении задачи
// Удалении задачи
// При загрузке страницы
// У твоего списка задач дожны быть функции:
//
//   handleClickRemove(index) - функция, которая будет получать индекс задачи и удалять её по индексу.
// handleClickAdd() - функция, которая будет брать из инпута значение и добавлять в конец массива эту задачу.

//   #Зачем нужна функция render()?
//   Эта функция будет работать также, как в классовых компонентах и отрисовывать список задач исходя из того, что есть в массиве.
//
//   Удаляем задачу из массива? Вызываем render()
// Добавляем задачу в массив? Вызываем render()
// Чтобы всегда выводить актуальный список задач на самой странице.
//
//   #Можно по другому?
//   Ничего страшного, если ты не сможешь решить точно по этим условиям. Самое главное - сделать список задач. Хоть костыльно, криво и даже на 50% рабочим.
//
//   Делай так, как ты сможешь и с помощью тех знаний JS, что есть у тебя. Если будут возникать сложности с реализацией, пиши в чат.
//
//   В пятницу проведём онлайн-трансляцию, где я покажу решение этой задачи.
